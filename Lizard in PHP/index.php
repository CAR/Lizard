<?php
include("lizard.php");
?>
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta name="description" content="Lizard in PHP">
	<meta name="author" content="Christian A. Gorke">
	<link rel="icon" href="img/favicon.ico">
	<title>Lizard</title>
	<link rel="stylesheet" href="css/bootstrap.min.css">
	<style type="text/css">
	html {
		position: relative;
		min-height: 100%;
	}
	body {
		margin-top: 10px;
		margin-bottom: 10px;
	}
	.container {
		width: auto;
		max-width: 680px;
		padding: 0 15px;
	}
	pre{
		display: block;
		font-family: monospace;
		padding: 9.5px;
		margin: 0 0 10px;
		font-size: 13px;
		line-height: 1.42857143;
		color: #333;
		word-break: break-all;
		word-wrap: break-word;
		background-color: #f5f5f5;
		border: 1px solid #ccc;
		border-radius: 4px;
	}
	pre code {
		line-height: 2;
	}
</style>
}
</head>
<body class="bg-light">
<main role="main" class="container">
<img class="d-block mx-auto mb-5" src="img/lizard_icon.png" alt="" width="90" height="90">
<h1>Lizard in PHP</h1>
<p class="lead">This is an implementation of the lightweight stream cipher <a href="https://tosc.iacr.org/index.php/ToSC/article/view/584">Lizard</a> in <a href="https://www.php.net">PHP</a>.</p>
<p>The authors of Lizard are Matthias Hamann, Matthias Krause, and Willi Meier. The author of Lizard in PHP is <a href="https://www.christiangorke.de">Christian A. Gorke</a>.</p>

<h2 class="mt-5">Usage</h2>
<p>First, include the <code>lizard.php</code> file which contains the Lizard php class in your main php file.</p>
<p>Lizard in PHP comes with two modes to generate keystream bits: <i>a priori known keystream length</i> and <i>on the fly generated keystream</i>.
The output is given as an array consisting of the generated keystream bits. To transform it into a hex value, the static function <code>binArray2hex()</code> is provided by Lizard in PHP.</p>
<p>The <code>Lizard</code> class is designed to be be easily extendable regarding output and encryption functions, feel free to add your own requirements.</p>

<h3 class="mt-4">A Priori Known Keystream Length</h3>
<p>For a given key <code>$key</code> (default input format: array of 120 bits), initialization vector <code>$iv</code> (default input format: array of 64 bits), and keystream output length <code>$length</code> (input format: integer), a keystream depending on these three values is generated by the Lizard algorithm.
The result can be fetched using <code>$Lizard->getKeystream()</code>.</p>
<pre>
<?php echo preg_replace('#\R+#', '', highlight_string('<?php
$Lizard = new Lizard($key, $iv, $length);
$keystream = $Lizard->getKeystream();
?>', TRUE)); ?>
</pre>

<h3 class="mt-4">On the Fly Generated Keystream</h3>
<p>For a given key <code>$key</code> (default input format: array of 120 bits) and initialization vector <code>$iv</code> (default input format: array of 64 bits) an instance of the <code>Lizard</code> class is generated.
Then, using <code>$Lizard->keystreamGeneration($x)</code> generates <code>$x</code> bits of the keystream which can be used multiple times.
Any further execution of <code>$Lizard->keystreamGeneration($y)</code> will return the next <code>$y</code> keystream bits which will follow after the first <code>$x</code> bits.</p>
<pre>
<?php echo preg_replace('#\R+#', '', highlight_string('<?php
$Lizard = new Lizard($key, $iv);
$Lizard->keystreamGeneration(100);                  // generate 100 bit keystream
$keystream1 = $Lizard->getKeystream();
$Lizard->keystreamGeneration(100);                  // generate next 100 bit keystream
$keystream2 = $Lizard->getKeystream();
$keystream = array_merge($keystream1, $keystream2); // concatenate all 200 bits keystream
?>', TRUE)); ?>
</pre>

<h2 class="mt-5">Example Values</h2>
<p>Here, we present four different examples of running Lizard in PHP.</p>
<p>The first generates a random key <code>$key</code> and random IV <code>$iv</code> and displays the resulting keystream.</p>
<p>The following three examples are the test vectors given in the Lizard publication.
The values appended by "(reference)" displays the reference value, while the rest is computed on the fly by Lizard in PHP.
If everything is implemented correctly, these values must match.</p>

<h3 class="mt-4">Random Key and IV</h3>
<?php
$key = array();
$iv = array();
$length = 128;

/* Random Values */
for ($i = 0; $i <= 119; $i++) $key[$i] = rand(0,1);
for ($i = 0; $i <= 63; $i++) $iv[$i] = rand(0,1);

$Lizard = new Lizard($key, $iv, $length);
$keystream = $Lizard->getKeystream();
?>
<pre>
Key:                   0x<?php echo @strtoupper(Lizard::binArray2hex($key)); ?><br>
IV:                    0x<?php echo @strtoupper(Lizard::binArray2hex($iv)); ?><br>
Keystream:             0x<?php echo strtoupper(Lizard::binArray2hex($keystream)); ?>
</pre>

<h3 class="mt-4">Test Vector 1</h3>
<?php
$key = array();
$iv = array();
$length = 128;

/* Test Vector 1 */
for ($i = 0; $i <= 119; $i++) $key[$i] = 0;
for ($i = 0; $i <= 63; $i++) $iv[$i] = 0;

$Lizard = new Lizard($key, $iv, $length);
$keystream = $Lizard->getKeystream();
?>
<pre>
Key:                   0x<?php echo strtoupper(Lizard::binArray2hex($key)); ?><br>
Key (reference):       0x000000000000000000000000000000<br>
IV:                    0x<?php echo strtoupper(Lizard::binArray2hex($iv)); ?><br>
IV (reference):        0x0000000000000000<br>
Keystream:             0x<?php echo strtoupper(Lizard::binArray2hex($keystream)); ?><br>
Keystream (reference): 0xB6304CA4CA276B3355EC2E10968E84B3
</pre>

<h3 class="mt-4">Test Vector 2</h3>
<?php
$key = array();
$iv = array();
$length = 128;

/* Test Vector 2 */
for ($i = 0; $i <= 63; $i++) $key[$i] = 0;
for ($i = 64; $i <= 119; $i++) $key[$i] = 1;
for ($i = 0; $i <= 63; $i++) $iv[$i] = 1;

$Lizard = new Lizard($key, $iv, $length);
$keystream = $Lizard->getKeystream();
?>
<pre>
Key:                   0x<?php echo strtoupper(Lizard::binArray2hex($key)); ?><br>
Key (reference):       0x0000000000000000FFFFFFFFFFFFFF<br>
IV:                    0x<?php echo strtoupper(Lizard::binArray2hex($iv)); ?><br>
IV (reference):        0xFFFFFFFFFFFFFFFF<br>
Keystream:             0x<?php echo strtoupper(Lizard::binArray2hex($keystream)); ?><br>
Keystream (reference): 0x4D190941816F942358F0D164F4ECEB09
</pre>

<h3 class="mt-4">Test Vector 3</h3>
<?php
$key = array();
$iv = array();
$length = 128;

/* Test Vector 3 */
for ($i = 0; $i <= 29; $i++) {
	$n = sprintf("%04d", decbin($i%16));
	$key[$i*4+0] = (int)$n[0];
	$key[$i*4+1] = (int)$n[1];
	$key[$i*4+2] = (int)$n[2];
	$key[$i*4+3] = (int)$n[3];
}
for ($i = 0; $i <= 15; $i++) {
	$n = sprintf("%04d", decbin(($i+10)%16));
	$iv[$i*4+0] = (int)$n[0];
	$iv[$i*4+1] = (int)$n[1];
	$iv[$i*4+2] = (int)$n[2];
	$iv[$i*4+3] = (int)$n[3];
}

$Lizard = new Lizard($key, $iv, $length);
$keystream = $Lizard->getKeystream();
?>
<pre>
Key:                   0x<?php echo strtoupper(Lizard::binArray2hex($key)); ?><br>
Key (reference):       0x0123456789ABCDEF0123456789ABCD<br>
IV:                    0x<?php echo strtoupper(Lizard::binArray2hex($iv)); ?><br>
IV (reference):        0xABCDEF0123456789<br>
Keystream:             0x<?php echo strtoupper(Lizard::binArray2hex($keystream)); ?><br>
Keystream (reference): 0x983311A97831586548209DAFBF26FC93
</pre>

<h2 class="mt-5">Source Code</h2>
<p>The source code of Lizard in PHP is hosted on <a href="https://github.com/CAR/Lizard">GitHub</a>. You can access is there for free.</p>
</main>
<footer class="my-5 pt-5 text-muted text-center text-small">
	<p class="mb-1">&copy; 2018 Christian A. Gorke</p>
</footer>
</body>
</html>
